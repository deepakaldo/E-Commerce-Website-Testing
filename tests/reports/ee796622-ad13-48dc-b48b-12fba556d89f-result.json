{"name": "test_login[admincase3@yourstore.com-admin ]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please enter some search keyword\nMessage: unexpected alert open: {Alert text : Please enter some search keyword}\n  (Session info: chrome=125.0.6422.78)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C9221F52+60322]\n\t(No symbol) [0x00007FF6C919CEC9]\n\t(No symbol) [0x00007FF6C9057EBA]\n\t(No symbol) [0x00007FF6C90EC402]\n\t(No symbol) [0x00007FF6C90CBFC3]\n\t(No symbol) [0x00007FF6C9099617]\n\t(No symbol) [0x00007FF6C909A211]\n\tGetHandleVerifier [0x00007FF6C953949D+3301613]\n\tGetHandleVerifier [0x00007FF6C95836C3+3605267]\n\tGetHandleVerifier [0x00007FF6C9579440+3563664]\n\tGetHandleVerifier [0x00007FF6C92D4326+790390]\n\t(No symbol) [0x00007FF6C91A750F]\n\t(No symbol) [0x00007FF6C91A3404]\n\t(No symbol) [0x00007FF6C91A3592]\n\t(No symbol) [0x00007FF6C9192F9F]\n\tBaseThreadInitThunk [0x00007FFE5961257D+29]\n\tRtlUserThreadStart [0x00007FFE5AFEAA48+40]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"413ea9e5c1319497789232ddeb9f2a6b\")>\nusername = 'admincase3@yourstore.com', password = 'admin '\n\n    @pytest.mark.parametrize(\"username, password\", test_data) #when you use @pytest.mark.parametrize(\"username, password\", test_data),\n    # pytest will generate and execute separate test cases for each tuple in test_data. For each test case, it will pass the corresponding username and password values to the test function\n    def test_login(browser, username, password):\n        browser.get(\"https://demo.nopcommerce.com/login?returnUrl=%2F\")\n        browser.find_element(By.ID, \"Email\").clear()\n        browser.find_element(By.ID, \"Email\").send_keys(username)\n        browser.find_element(By.ID, \"Password\").clear()\n        browser.find_element(By.ID, \"Password\").send_keys(password)\n        browser.find_element(By.CSS_SELECTOR, \"button[type='submit']\").click()\n>       assert \"Log out\" in browser.page_source  # Check for the presence of the \"Log out\" link in the page source\n\ntest_login.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:448: in page_source\n    return self.execute(Command.GET_PAGE_SOURCE)[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001984A5FAED0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Please enter some search keyword\"},\"error\":\"unexpected alert open\"...07FF6C9192F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE5961257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE5AFEAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please enter some search keyword\nE           Message: unexpected alert open: {Alert text : Please enter some search keyword}\nE             (Session info: chrome=125.0.6422.78)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF6C9221F52+60322]\nE           \t(No symbol) [0x00007FF6C919CEC9]\nE           \t(No symbol) [0x00007FF6C9057EBA]\nE           \t(No symbol) [0x00007FF6C90EC402]\nE           \t(No symbol) [0x00007FF6C90CBFC3]\nE           \t(No symbol) [0x00007FF6C9099617]\nE           \t(No symbol) [0x00007FF6C909A211]\nE           \tGetHandleVerifier [0x00007FF6C953949D+3301613]\nE           \tGetHandleVerifier [0x00007FF6C95836C3+3605267]\nE           \tGetHandleVerifier [0x00007FF6C9579440+3563664]\nE           \tGetHandleVerifier [0x00007FF6C92D4326+790390]\nE           \t(No symbol) [0x00007FF6C91A750F]\nE           \t(No symbol) [0x00007FF6C91A3404]\nE           \t(No symbol) [0x00007FF6C91A3592]\nE           \t(No symbol) [0x00007FF6C9192F9F]\nE           \tBaseThreadInitThunk [0x00007FFE5961257D+29]\nE           \tRtlUserThreadStart [0x00007FFE5AFEAA48+40]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "parameters": [{"name": "username", "value": "'admincase3@yourstore.com'"}, {"name": "password", "value": "'admin '"}], "start": 1716692829067, "stop": 1716692829752, "uuid": "719301ab-65a1-4bc5-b772-3a3efada90af", "historyId": "46196944f3eec09699112520b7f705a8", "testCaseId": "7a6d5049f9f16ad82653dde78c1774b6", "fullName": "test_login#test_login", "labels": [{"name": "suite", "value": "test_login"}, {"name": "host", "value": "Deepak"}, {"name": "thread", "value": "11304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}